(define (derivative exp var)
	(cond ((number? exp) 0)
				 ((variable? exp)
					(if (same-variable? exp var)
							1
							0))
				 ((sum? exp) (add (derivative (first-term exp) var)
												  (derivative (second-term exp) var)))
				 ((product? exp)
					(add (product (first-term exp)
												(derivative (second-term exp) var))
							 (product (derivative (first-term exp) var)
												(second-term exp))))))

(define (variable? exp) (symbol? exp))
(define (same-variable? v1 v2) 
	(and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (getop exp) (car exp))
(define (first-term exp) (cadr exp))
(define (second-term exp) (caddr exp))
(define (sum? exp) (and (pair? exp) (eq? (getop exp) '+)))
(define (product? exp) (and (pair? exp) (eq? (getop exp) '*)))
(define (add addend augend)
	(list '+ addend augend))
(define (product multiplier multiplicand)
	(list '* multiplier multiplicand))
